#Install cht config cli
npm install -g cht-conf

#Kill all other instances
docker kill $(docker ps -a -q)

#Init blank project
cht initialise-project-layout

#Launch instance
>> CHT_COMPOSE_PROJECT_NAME=app-devl COUCHDB_SECRET=foo DOCKER_CONFIG_PATH=${PWD} COUCHDB_DATA=${PWD}/couchd CHT_COMPOSE_PATH=${PWD} COUCHDB_USER=medic COUCHDB_PASSWORD=password docker-compose u
>>>Put the above vars in the .env file
>> docker-compose up #this requires a .env file in the dir

#Get docker yml files
mkdir  ~/cht-4-app-developer && cd ~/cht-4-app-developer
curl -sZ -o docker-compose.yml https://raw.githubusercontent.com/medic/cht-upgrade-service/main/docker-compose.yml
curl -s -o cht-core.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic%3Amedic%3Amaster/docker-compose/cht-core.yml
curl -s -o cht-couchdb.yml https://staging.dev.medicmobile.org/_couch/builds_4/medic%3Amedic%3Amaster/docker-compose/cht-couchdb.yml

#Convert, build and upload app,contact forms
cht --local convert-app-forms upload-app-forms
cht --local convert-contact-forms upload-contact-forms
>> cht --url=https://morlig:B8NnDhSyxg@localhost convert-app-forms upload-app-forms --accept-self-signed-certs
>> cht --url=https://morlig:B8NnDhSyxg@localhost convert-contact-forms upload-contact-forms --accept-self-signed-certs

#Remove forms
cht --local delete-forms -- *my_form_name*
>> cht --url=https://morlig:B8NnDhSyxg@localhost delete-all-forms --accept-self-signed-certs
> cht --url=https://morlig:B8NnDhSyxg@localhost delete-forms -- e --accept-self-signed-certs

#Convert and upload contact forms
>> cht --url=https://morlig:B8NnDhSyxg@localhost convert-contact-forms upload-contact-forms --accept-self-signed-certs

#Convert and upload app forms
>> cht --url=https://morlig:B8NnDhSyxg@localhost convert-app-forms upload-app-forms --accept-self-signed-certs

#Convert and upload app&contact forms
>> cht --url=https://morlig:B8NnDhSyxg@localhost convert-contact-forms convert-app-forms upload-contact-forms upload-app-forms --accept-self-signed-certs
>> cht --url=https://morlig:B8NnDhSyxg@localhost delete-all-forms convert-contact-forms convert-app-forms upload-contact-forms upload-app-forms --accept-self-signed-certs

#Compile, backup and upload app settings and translations
cht --url=https://<username>:<password>@localhost --accept-self-signed-certs upload-app-settings
>> cht --url=https://morlig:B8NnDhSyxg@localhost compile-app-settings backup-app-settings upload-app-settings upload-custom-translations upload-resources --accept-self-signed-certs

#Updade package json
npm install --save-dev cht-conf-test-harness chai mocha

#Configure and upload custom translation and resources (custom field labels)
[File] translations/messages-en.properties
    > [Line] {field} = "custom label"
>> cht --url=https://morlig:B8NnDhSyxg@localhost upload-custom-translations --accept-self-signed-certs
>> cht --url=https://morlig:B8NnDhSyxg@localhost upload-resources --accept-self-signed-certs
>> cht --url=https://morlig:B8NnDhSyxg@localhost upload-custom-translations upload-resources --accept-self-signed-certs

docker run -p 5984:5984 -d couchdb

#Install TLS from cht-core root
>> ./scripts/add-local-ip-certs-to-docker-4.x.sh icapdrei_nginx_1

Hierarchy
---------------------------------
> Health Facility/District/District Hospital    [district_hospital]
	> Health Center/Area/Health Center/         [health_center]
		> Area (Household)(Clinic)              [clinic]
			> Person                            [person]
---------------------------------

#A9A9A9

####Postgres
sudo apt install postgresql postgresql-contrib
sudo passwd postgres
sudo -u postgres psql
su - postgres

	superuser: postgres
	pass: postgresyam
	port: 5432

createdb mydb
psql mydb > mydb=#
> sudo -u postgres psql -c 'SHOW config_file' >  /etc/postgresql/14/main/postgresql.conf > listen_address = '*'
sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'postgres';"

docker run --name couch2pg -e POSTGRES_PASSWORD=postgresyam -d -p 5432:5432 postgres (map docekr port)
psql postgresql://postgres:1234@localhost:5432/postgres access database

#POSTGRES
[Check] sudo /etc/init.d/postgresql status
[Start] sudo /etc/init.d/postgresql start
[CheckVersion][client]psql --version [server]pg_config --version
[Map port to host]docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d -p [HostPort]5432:[ContainerPort]5432 postgres
	>> Accessible from host public-server-ip:5432
		>> [Check docker contaienrs] docker ps
			>>Locate postgres container PORT[0.0.0.0:5432->5432/tcp]

#PSQL
[StepIn] sudo -u postgres psql
[ListDatabases] \l
[Login without password] sudo -u [user]postgres psql [database]db_name | sudo -u postgres psql postgres
[Change Password] ALTER USER postgres WITH PASSWORD 'postgresyam'
[Change Password] \password [user]postgres
[Change Name] ALTER USER myuser RENAME TO newname
[Login with password] psql -U postgres myapp | psql -U postgres | psql -U postgres postgres | psql -U postgres -h 127.0.0.1
[Login from client] psql -h public-ip-server -p 5432 -U postgres
[Edit Conf]sudo nano /etc/postgresql/14/main/pg_ident.conf 	<> [MAPNAME]user1	<computer-username> [PG-USERNAME]postgres
[Edit hba]sudo nano /etc/postgresql/14/main/pg_hba.conf		<> local[TYPE] all[DATABASE] blank[ADDRESS] [METHOD]peer map=user1

[Restart service] sudo /etc/init.d/postgresql restart

Linux (Linux)
[List running services] systemctl --type=service --state=running
[Check apache status] sudo systemctl status apache2
[Stop apache service] sudo systemctl start|stop|restart|reload apache2
[Remove apache] sudo apt remove apache2
[Restart system] reboot -f

#Python3
[Install pip] sudo apt-get install python3-pip
[Check pip] python3 -m pip --version

Docker (Linux)
>> sudo su
[Stop all containers] docker stop $(docker ps -a -q)
[Remove all containers] docker system prune -a --volumes
[Remove all volumes] docker volume rm $(docker volume ls -qf dangling=true)
[Remove all images] docker rmi -f $(docker images -aq)
[List images] docker image ls
[List volumes] docker volume ls

CertBot (Ubuntu)
sudo certbot --nginx

Port (Ubuntu)
sudo ufw allow from any to any port 8444 proto tcp
sudo ufw allow from any to any port 8081 proto tcp
[Check listening ports] sudo netstat -tunlp